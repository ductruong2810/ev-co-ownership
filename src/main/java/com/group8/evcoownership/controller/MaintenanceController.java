package com.group8.evcoownership.controller;

import com.group8.evcoownership.dto.MaintenanceCreateRequestDTO;
import com.group8.evcoownership.dto.MaintenanceResponseDTO;
import com.group8.evcoownership.service.MaintenanceService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;

@RestController
@RequestMapping("/api/maintenances")
@RequiredArgsConstructor
@Tag(name = "Maintenance", description = "Qu·∫£n l√Ω y√™u c·∫ßu b·∫£o tr√¨ xe (Technician t·∫°o, Staff/Admin duy·ªát, Admin gi√°m s√°t)")
public class MaintenanceController {

    private final MaintenanceService maintenanceService;

    // ======================================================
    // ================== TECHNICIAN / STAFF / ADMIN ========
    // ======================================================

    /**
     *  T·∫°o y√™u c·∫ßu b·∫£o tr√¨ m·ªõi cho xe (Technician, Staff, Admin ƒë·ªÅu c√≥ th·ªÉ l√†m)
     */
    @PostMapping
    @PreAuthorize("hasAnyRole('TECHNICIAN', 'STAFF', 'ADMIN')")
    @Operation(
            summary = "[Technician/Staff/Admin] T·∫°o y√™u c·∫ßu b·∫£o tr√¨",
            description = """
                    Ng∆∞·ªùi d√πng k·ªπ thu·∫≠t ho·∫∑c nh√¢n vi√™n/staff c√≥ th·ªÉ m·ªü y√™u c·∫ßu b·∫£o tr√¨ m·ªõi cho xe.
                    - Nh·∫≠p ng√†y d·ª± ki·∫øn b·∫£o d∆∞·ª°ng (ph·∫£i l√† t∆∞∆°ng lai).
                    - G·ª≠i k√®m m√¥ t·∫£ v√† chi ph√≠ d·ª± ki·∫øn.
                    """
    )
    public ResponseEntity<MaintenanceResponseDTO> create(
            @Valid @RequestBody MaintenanceCreateRequestDTO req,
            Authentication auth
    ) {
        return ResponseEntity.ok(maintenanceService.create(req, auth.getName()));
    }

    // ======================================================
    // ===================== STAFF / ADMIN ==================
    // ======================================================

    /**
     *  Xem danh s√°ch t·∫•t c·∫£ y√™u c·∫ßu b·∫£o tr√¨
     */
    @GetMapping
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN')")
    @Operation(summary = "[Staff/Admin] Danh s√°ch y√™u c·∫ßu b·∫£o tr√¨", description = "Hi·ªÉn th·ªã danh s√°ch to√†n b·ªô c√°c y√™u c·∫ßu b·∫£o tr√¨ hi·ªán c√≥ trong h·ªá th·ªëng.")
    public ResponseEntity<List<MaintenanceResponseDTO>> getAll() {
        return ResponseEntity.ok(maintenanceService.getAll());
    }

    /**
     *  Duy·ªát y√™u c·∫ßu b·∫£o tr√¨ (PENDING ‚Üí APPROVED)
     */
    @PutMapping("/{id}/approve")
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN')")
    @Operation(
            summary = "[Staff/Admin] Duy·ªát y√™u c·∫ßu b·∫£o tr√¨",
            description = """
                    Nh√¢n vi√™n ho·∫∑c qu·∫£n tr·ªã vi√™n duy·ªát y√™u c·∫ßu b·∫£o tr√¨ h·ª£p l√Ω ‚Üí chuy·ªÉn tr·∫°ng th√°i t·ª´ PENDING sang APPROVED.
                    - Ghi nh·∫≠n ng∆∞·ªùi duy·ªát.
                    - Trigger Expense t·ª± ƒë·ªông (tr·ª´ qu·ªπ nh√≥m).
                    """
    )
    public ResponseEntity<MaintenanceResponseDTO> approve(
            @PathVariable Long id,
            @RequestParam LocalDate nextDueDate, // staff nh·∫≠p ng√†y k·∫ø ti·∫øp
            Authentication auth
    ) {
        return ResponseEntity.ok(maintenanceService.approve(id, auth.getName(), nextDueDate));
    }

    /**
     *  T·ª´ ch·ªëi y√™u c·∫ßu b·∫£o tr√¨ (PENDING ‚Üí REJECTED)
     */
    @PutMapping("/{id}/reject")
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN')")
    @Operation(
            summary = "[Staff/Admin] T·ª´ ch·ªëi y√™u c·∫ßu b·∫£o tr√¨",
            description = """
                    Nh√¢n vi√™n ho·∫∑c qu·∫£n tr·ªã vi√™n x√°c ƒë·ªãnh y√™u c·∫ßu kh√¥ng h·ª£p l·ªá ‚Üí chuy·ªÉn tr·∫°ng th√°i t·ª´ PENDING sang REJECTED.
                    - Ghi nh·∫≠n ng∆∞·ªùi t·ª´ ch·ªëi.
                    """
    )
    public ResponseEntity<MaintenanceResponseDTO> reject(
            @PathVariable Long id,
            Authentication auth
    ) {
        return ResponseEntity.ok(maintenanceService.reject(id, auth.getName()));
    }

    /**
     * üß© Xem chi ti·∫øt y√™u c·∫ßu b·∫£o tr√¨
     */
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('STAFF', 'ADMIN')")
    @Operation(
            summary = "[Staff/Admin] Xem chi ti·∫øt y√™u c·∫ßu b·∫£o tr√¨",
            description = """
            Staff v√† Admin ƒë·ªÅu c√≥ th·ªÉ xem chi ti·∫øt y√™u c·∫ßu b·∫£o tr√¨ ƒë·ªÉ ki·ªÉm tra th√¥ng tin tr∆∞·ªõc khi duy·ªát ho·∫∑c t·ª´ ch·ªëi.
            Admin c√≥ th·ªÉ xem to√†n b·ªô; Staff ch·ªâ xem trong ph·∫°m vi nh√≥m m√† h·ªç qu·∫£n l√Ω.
            """
    )
    public ResponseEntity<MaintenanceResponseDTO> getOne(
            @PathVariable Long id
    ) {
        return ResponseEntity.ok(maintenanceService.getOne(id));
    }

}
