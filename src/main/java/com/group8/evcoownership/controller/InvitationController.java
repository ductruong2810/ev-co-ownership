package com.group8.evcoownership.controller;

import com.group8.evcoownership.dto.InvitationAcceptRequest;
import com.group8.evcoownership.dto.InvitationCreateRequest;
import com.group8.evcoownership.dto.InvitationResponse;
import com.group8.evcoownership.service.InvitationService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api")
@Tag(name = "Invitations", description = "Qu·∫£n l√Ω l·ªùi m·ªùi tham gia nh√≥m (g·ª≠i, resend t·ª± ƒë·ªông, accept, expire)")
public class InvitationController {

    private final InvitationService invitationService;

    // ======================================================
    // =============== CREATE / RESEND (AUTO) ===============
    // ======================================================

    /**
     * üì® G·ª≠i l·ªùi m·ªùi (ho·∫∑c t·ª± ƒë·ªông resend n·∫øu ƒëang PENDING)
     * - Inviter l·∫•y t·ª´ token
     * - groupId l·∫•y t·ª´ path
     * - Service t·ª± ki·ªÉm tra n·∫øu c√≥ invitation PENDING th√¨ resend thay v√¨ t·∫°o m·ªõi
     */
    @PostMapping("/groups/{groupId}/invitations")
    @PreAuthorize("@ownershipGroupService.isGroupAdmin(authentication.name, #groupId)")
    @Operation(
            summary = "G·ª≠i l·ªùi m·ªùi (ho·∫∑c t·ª± ƒë·ªông g·ª≠i l·∫°i)",
            description = """
                    T·∫°o m·ªõi l·ªùi m·ªùi n·∫øu ch∆∞a t·ªìn t·∫°i. 
                    N·∫øu email ƒë√£ c√≥ invitation PENDING trong c√πng group, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông resend (c·∫≠p nh·∫≠t OTP, th·ªùi h·∫°n, g·ª≠i l·∫°i mail).
                    """
    )
    public ResponseEntity<InvitationResponse> createOrResend(
            @PathVariable Long groupId,
            @RequestBody @Valid InvitationCreateRequest req,
            Authentication auth
    ) {
        InvitationResponse response = invitationService.create(groupId, req, auth);
        return ResponseEntity.ok(response);
    }

    // ======================================================
    // =================== LIST / DETAILS ===================
    // ======================================================

    /**
     * L·∫•y danh s√°ch l·ªùi m·ªùi c·ªßa group (ch·ªâ group member / staff / admin)
     */
    @GetMapping("/groups/{groupId}/invitations")
    @Operation(summary = "Danh s√°ch l·ªùi m·ªùi theo nh√≥m", description = "L·∫•y danh s√°ch l·ªùi m·ªùi c·ªßa m·ªôt group (ph√¢n trang).")
    public ResponseEntity<Page<InvitationResponse>> listByGroup(
            @PathVariable Long groupId,
            @RequestParam(defaultValue = "0") @PositiveOrZero int page,
            @RequestParam(defaultValue = "20") @Min(1) @Max(100) int size,
            Authentication auth
    ) {
        return ResponseEntity.ok(invitationService.listByGroup(groupId, page, size, auth));
    }

    /**
     * L·∫•y chi ti·∫øt 1 invitation c·ª• th·ªÉ
     */
    @GetMapping("/invitations/{invitationId}")
    @Operation(summary = "Chi ti·∫øt l·ªùi m·ªùi", description = "L·∫•y th√¥ng tin chi ti·∫øt c·ªßa l·ªùi m·ªùi c·ª• th·ªÉ.")
    public ResponseEntity<InvitationResponse> getOne(
            @PathVariable Long invitationId,
            Authentication auth
    ) {
        return ResponseEntity.ok(invitationService.getOne(invitationId, auth));
    }

    // ======================================================
    // ================== EXPIRE / ACCEPT ===================
    // ======================================================

    /**
     * üßä H·ªßy (expire) l·ªùi m·ªùi ngay l·∫≠p t·ª©c
     */
    @PostMapping("/invitations/{invitationId}/expire")
    @PreAuthorize("isAuthenticated()")
    @Operation(summary = "H·ªßy l·ªùi m·ªùi", description = "ƒê·∫∑t tr·∫°ng th√°i l·ªùi m·ªùi th√†nh EXPIRED ngay l·∫≠p t·ª©c.")
    public ResponseEntity<Void> expireNow(
            @PathVariable Long invitationId,
            Authentication auth
    ) {
        invitationService.expireNow(invitationId, auth);
        return ResponseEntity.ok().build();
    }

    /**
     * ‚úÖ Ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi ch·∫•p nh·∫≠n b·∫±ng OTP
     */
    @PostMapping("/invitations/accept")
    @PreAuthorize("isAuthenticated()")
    @Operation(summary = "Ch·∫•p nh·∫≠n l·ªùi m·ªùi", description = "Ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi nh·∫≠p OTP ƒë·ªÉ tham gia group.")
    public ResponseEntity<InvitationResponse> accept(
            @RequestBody @Valid InvitationAcceptRequest req,
            Authentication auth
    ) {
        return ResponseEntity.ok(invitationService.accept(req, auth));
    }

    // ======================================================
    // ================= OPTIONAL (ADMIN) ===================
    // ======================================================

    /**
     * ‚öôÔ∏è API g·ª≠i l·∫°i email th·ªß c√¥ng (d√†nh cho admin/backend, kh√¥ng c·∫ßn d√πng tr√™n FE v√¨ create() ƒë√£ t·ª± x·ª≠ l√Ω)
     */
    @PostMapping("/invitations/{invitationId}/resend")
    @PreAuthorize("hasAnyRole('ADMIN','STAFF')")
    @Operation(summary = "[Admin] G·ª≠i l·∫°i email th·ªß c√¥ng", description = "D√πng cho admin ho·∫∑c staff g·ª≠i l·∫°i email m·ªôt invitation c·ª• th·ªÉ.")
    public ResponseEntity<Void> resendManual(
            @PathVariable Long invitationId,
            Authentication auth
    ) {
        invitationService.resend(invitationId, auth);
        return ResponseEntity.ok().build();
    }
}
